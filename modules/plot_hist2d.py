"""
    Nice plots for hyper-parameter tunning
    Requires python 2.7 and ROOT 6.10/08
"""

from __future__ import division

from ROOT import gROOT, TCanvas, TH2F

gROOT.SetBatch(True)


# Phi02_adam
timing = [26.215679, 28.540846, 26.419376, 22.628265, 29.898935, 26.807327, 30.356528, 28.386068, 12.19813, 15.141432, 10.148861, 13.421314, 16.22232, 16.82215, 16.464606, 16.37512, 7.616649, 7.479513, 6.409795, 7.789416, 8.913824, 8.547696, 8.770934, 8.640597, 5.118218, 5.381024, 5.701675, 5.294609, 5.531809, 5.86191, 6.24442, 5.66175, 3.255577, 3.722482, 3.492225, 3.569185, 4.301058, 3.935569, 4.226427, 4.189655, 3.359671, 2.955854, 2.929028, 2.988012, 3.728422, 3.54982, 3.774447, 4.280285, 2.803418, 2.875671, 2.791564, 2.940498, 3.481508, 3.713001, 3.489983, 3.326119]

train_accuracy = [0.50338739, 0.71870196, 0.71790493, 0.71750641, 0.71665245, 0.72080845, 0.71653855, 0.71767718, 0.50338739, 0.72411042, 0.72416741, 0.72325647, 0.72183317, 0.73589522, 0.72325647, 0.50338739, 0.71585542, 0.71340734, 0.70959294, 0.71363509, 0.70942217, 0.71619695, 0.7091375, 0.71625394, 0.73042983, 0.73077142, 0.72707087, 0.73840022, 0.73817253, 0.70896667, 0.72627383, 0.71596926, 0.73185313, 0.73253632, 0.7397666, 0.74602902, 0.73948193, 0.74175918, 0.72587532, 0.74306858, 0.73498434, 0.73697692, 0.74130374, 0.73766011, 0.7380017, 0.74027896, 0.73879874, 0.7445488, 0.70856816, 0.71528608, 0.71756333, 0.70566469, 0.71710789, 0.7205807, 0.71363509, 0.72980356]

test_accuracy = [0.50962943, 0.71603137, 0.71364057, 0.71563292, 0.71457034, 0.71656263, 0.71297652, 0.71271086, 0.50962943, 0.71895337, 0.71855491, 0.71589851, 0.71722674, 0.73210251, 0.71935183, 0.50962943, 0.71151549, 0.70819497, 0.70221812, 0.7069996, 0.70514011, 0.71018726, 0.70633548, 0.71350777, 0.72732103, 0.72439897, 0.7232036, 0.72891486, 0.7338292, 0.70261657, 0.72758669, 0.70593703, 0.73064154, 0.73064154, 0.73436046, 0.73714972, 0.73568869, 0.73289943, 0.7178908, 0.73422766, 0.73343074, 0.73422766, 0.73701686, 0.73104, 0.73489177, 0.73276663, 0.733962, 0.74033737, 0.70567143, 0.71682829, 0.71563292, 0.70274937, 0.71483594, 0.71616417, 0.7097888, 0.72466463]

"""
# MACMINI_adam
timing = [19.653414, 19.119879, 19.225279, 19.316461, 20.632058, 20.845365, 20.924385, 21.330284, 11.963459, 11.919985, 11.850586, 12.105316, 12.947198, 13.169154, 13.002206, 12.935541, 7.296905, 7.252537, 7.336213, 7.250607, 8.155636, 8.342255, 8.274422, 8.137192, 5.888792, 5.759837, 5.836069, 5.881778, 6.659572, 6.549491, 6.562548, 6.668397, 4.441269, 4.483467, 4.454115, 4.500572, 5.471434, 5.319134, 5.43853, 5.318957, 4.442768, 4.465011, 4.300926, 4.430185, 5.250048, 5.100899, 5.397764, 5.215705, 4.247366, 4.281971, 4.233349, 4.199135, 4.946871, 4.911522, 4.850724, 4.978875]

train_accuracy = [0.50338739, 0.71944207, 0.73492742, 0.72206092, 0.72143465, 0.69775122, 0.50338739, 0.73219472, 0.50338739, 0.72143465, 0.73253632, 0.72092229, 0.73555368, 0.72314262, 0.70475376, 0.72496444, 0.73526901, 0.71841729, 0.71619695, 0.72490746, 0.72075152, 0.74027896, 0.7321378, 0.73099917, 0.73674923, 0.73276401, 0.74312556, 0.71966982, 0.73566753, 0.73720467, 0.73407346, 0.743581, 0.73726159, 0.74335325, 0.74056363, 0.74010819, 0.73304868, 0.74437803, 0.74147451, 0.74210078, 0.73282093, 0.73851407, 0.74005121, 0.73817253, 0.73766011, 0.74289781, 0.74005121, 0.74147451, 0.66108739, 0.69547397, 0.70936519, 0.70634782, 0.69814974, 0.7010532, 0.7229718, 0.7282095]

test_accuracy = [0.50962943, 0.7149688, 0.72771949, 0.71828926, 0.71749234, 0.69398326, 0.50962943, 0.72439897, 0.50962943, 0.7176252, 0.72652411, 0.71536726, 0.72771949, 0.71975029, 0.70673394, 0.71895337, 0.7283836, 0.71178108, 0.71058571, 0.7176252, 0.71204674, 0.73343074, 0.72732103, 0.73170406, 0.73170406, 0.72705537, 0.73409486, 0.71443748, 0.72811794, 0.73223537, 0.72439897, 0.73542303, 0.73104, 0.73635274, 0.73409486, 0.73462611, 0.73276663, 0.73502457, 0.73741531, 0.73768097, 0.72227389, 0.73329794, 0.73582149, 0.73542303, 0.72785228, 0.73449332, 0.7336964, 0.73143846, 0.65918452, 0.6907956, 0.70660114, 0.70314783, 0.68946737, 0.69597554, 0.71868771, 0.72493029]
"""


xl = [[1], [2], [5], [10], [5, 5], [10, 5], [5, 10], [10, 10]]

yl = [1, 2, 5, 10, 50, 100, 1000]

nx = len(xl)
ny = len(yl)

c1 = TCanvas('c1', 'c1', 1400, 800)

h0 = TH2F('h0', 'Accuracy Score (training)', nx, 0, nx, ny, 0, ny)

h0.SetStats(0)
h0.SetMarkerSize(1.8)
h0.SetMarkerColor(2)
h0.GetXaxis().SetTitle('number of hidden units per layer')
h0.GetYaxis().SetTitle('batch size')
h0.GetXaxis().CenterTitle()
h0.GetYaxis().CenterTitle()
h0.GetXaxis().SetLabelSize(.050)
h0.GetYaxis().SetLabelSize(.050)
h0.GetXaxis().SetTitleSize(.045)
h0.GetYaxis().SetTitleSize(.045)

h1 = h0.Clone('h1')
h1.SetTitle('Accuracy Score (test)')

h2 = h0.Clone('h2')
h2.SetTitle('Training Time (seconds)')

for j in xrange(ny):
    for i in xrange(nx):
        w = train_accuracy[j*nx+i]
        z = test_accuracy[j*nx+i]
        t = timing[j*nx+i]
        h0.Fill(str(xl[i]), str(yl[j]), round(w, 3))
        h1.Fill(str(xl[i]), str(yl[j]), round(z, 3))
        h2.Fill(str(xl[i]), str(yl[j]), round(t, 1))

h0.Draw('colz')
h0.Draw('text same')
c1.SaveAs('trainaccuracy.png')

h1.Draw('colz')
h1.Draw('text same')
c1.SaveAs('testaccuracy.png')

h2.Draw('colz')
h2.Draw('text same')
c1.SaveAs('traintime.png')
